{
  "name": "AF.DataAccessor.sample",
  "tagline": "Step by step implementation of AF.DataAccessor component",
  "body": "Introduction\r\nThere are two different approach to connect sql database. First, ado.net with store procedure and second is ORM, like Entity framework.\r\n\r\nGenerally, Architects and developers prefer Ado.net for performance over Entity framework. But biggest pain point of Ado.net is, Developers need to write some piece of code for managing connection. improper connection management can lead to connection leakage.\r\n\r\nThe sql connector AF.DataAccessor can make life easy by taking care of connection management and on top of that, it provides support for Disaster Recovery.\r\n\r\nhere, we will demonstrate implementation of AF.DataAccessor in project.\r\n\r\nFirst, create a new project. here, i am creating web project. you can also choose window or console project.\r\n\r\n\r\nClick on OK, it will open up next window. \r\n\r\n\r\n\r\n\r\nClick OK, it will add new web form application. \r\n\r\n\r\n\r\n\r\n\r\n\r\nNow go to Tools->NuGet Package Manage->Package Manager console and type command  install-package AF.DataAccessor. \r\n\r\n\r\n\r\n\r\nNuget package AF.DataAccessor is installed and below configuration (Highlighted lines) added in web.config file. Before install package, ensure <configSections> </configSections> is in config file. \r\n\r\n\r\n<configuration>\r\n <configSections>\r\n\r\n <section name=\"AFServerSection\" requirePermission=\"false\" type=\"Architecture.Foundation.DataAccessor.Configuration.Server.AFServerSection, Architecture.Foundation.DataAccessor\" />\r\n\r\n<section name=\"AFDatabaseSection\" requirePermission=\"false\" type=\"Architecture.Foundation.DataAccessor.Configuration.Database.AFDatabaseSection, Architecture.Foundation.DataAccessor\" />\r\n    \r\n  </configSections>\r\n\r\n <AFServerSection>\r\n    <Elements>\r\n      <add Order=\"1\" ServerName=\"localhost\" />\r\n    </Elements>\r\n  </AFServerSection>\r\n\r\n  <AFDatabaseSection>\r\n    <Elements>\r\n      <add Name=\"AF\" InitialCatalog=\"Database Name\" UserID=\"userID\"        Password=\"password\" />\r\n    </Elements>\r\n  </AFDatabaseSection>\r\n\r\n</configuration>\r\n\r\n\r\nChange server name, Initial Catalog, user id and password as per your environment. \r\n\r\nNow add Data access class in your project and decorate the class with Attribute AFDataStore and pass connection key into the attribute. here, connection key is AF which is default name, added with installation. you may change the connection key in web.config - > AFDatabaseSection.\r\n\r\nInherit class AFDataStoreAccessor  in Data access class. \r\n\r\n\r\n\r\n\r\n\r\nYour application is now ready to connect database. \r\n\r\nLets, do insert operation using this component. Create web page to accept data from user and then send DTO object to data access class to insert record into table. \r\n\r\n\r\n\r\n\r\nThe framework automatically close database connection after execution of sql command. \r\n\r\nIt is very simple. Right ? Lets fetch records from database by creating data reader.\r\n\r\n\r\n\r\n\r\nAfter fill data into DTO object, remember to close data reader. Connection needs to keep alive to fetch data. hence the framework keep connection open until data reader is closed.\r\n\r\nYou can see [This blog](http://dotnetcomp.blogspot.in/2016/07/step-by-step-implementation-guide-for.html)\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}